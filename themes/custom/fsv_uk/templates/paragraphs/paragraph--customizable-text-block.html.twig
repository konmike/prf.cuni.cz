{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{%
	set classes = [
    'paragraph',
		'paragraph--customizable',
		'printable',
    ((content.field_background_color.0['#markup']) == '#d43241' or (content.field_background_color.0['#markup']) == 'rgb(212, 50, 65)') ? 'paragraph--red-white',
	]
%}
{%
  set section_style = [
    'background-color: ' ~ content.field_background_color[0]|raw|render ~ ';',
    (content.field_general_image[0] is not empty) ? 'background-image: linear-gradient(to left, rgb(255,255,255) 20%, rgba(255,255,255,0.5) 70%), url(' ~ content.field_general_image[0]|raw|render|render ~');',
    (content.field_size_px.0['#markup'] != '0.00') ? 'min-height: ' ~ content.field_size_px|raw|render ~ 'px;', 
    (content.field_border_size.0['#markup'] != '0.00') ? 'border-bottom: ' ~ content.field_border_size|raw|render ~ 'px solid ' ~ content.field_border_color|raw|render ~ ';',
    'margin-top: ' ~ content.field_margin_top[0]|raw|render ~ 'em;',
    'margin-bottom: ' ~ content.field_margin_bottom[0]|raw|render ~ 'em;',
    'padding-top: ' ~ content.field_padding_top[0]|raw|render ~ 'em;',
    'padding-bottom: ' ~ content.field_padding_bottom[0]|raw|render ~ 'em;',
    'padding-left: ' ~ content.field_padding_left[0]|raw|render ~ 'em;',
    'padding-right: ' ~ content.field_padding_right[0]|raw|render ~ 'em;',
  ]
%}
{%
  set title_style = [
    'border-bottom: ' ~ content.field_underline_size|raw|render ~ 'rem solid ' ~ content.field_underline_color|raw|render ~ ';',
    'color: ' ~ content.field_color[0]|raw|render ~ ';',
    ('0' in content.field_uppercase[0] or content.field_uppercase[0] is empty) ? 'text-transform: none;' : 'text-transform: uppercase;',
  ]
%}

{%
  set body_style = [
    'padding-top: ' ~ content.field_body_padding_top[0]|raw|render ~ 'rem;',
    'padding-bottom: ' ~ content.field_body_padding_bottom[0]|raw|render ~ 'rem;',
    'padding-left: ' ~ content.field_body_padding_left[0]|raw|render ~ 'rem;',
    'padding-right: ' ~ content.field_body_padding_right[0]|raw|render ~ 'rem;',
  ]
%}

{% block paragraph %}
  <section {{ attributes.addClass(classes).setAttribute('style', section_style) }}>
  
    

    {% block content %}

    {% if (not content.field_skryt_nadpis['#items'].0.getValue().value) and (content.field_anchor is not empty) %}
      {% set view = drupal_view_result('test_smooth_menu', 'block_1', page_id)|length %}
        {% if view > 0 %}
          {{ drupal_view('test_smooth_menu', 'block_1', page_id) }}
        {% endif %}
    {% endif %}
      
    {% if (content.field_skryt_nadpis['#items'].0.getValue().value) %}
    {% else %}
    
        <h2 id="{{ content.field_anchor.0 }}" class="padding section-title" {{ attributes.setAttribute('style', title_style) }}>{{ content.field_title.0 }}</h2>
    {% endif %}


    <div class="body__content" {{ attributes.setAttribute('style', body_style) }}>
      {{ content.field_wysiwyg_body.0 }}
    </div>
    
    {% endblock %}
  </section>
{% endblock paragraph %}
