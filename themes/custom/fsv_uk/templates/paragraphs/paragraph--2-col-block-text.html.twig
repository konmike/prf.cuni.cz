{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{%
	set section_classes = [
		'section',
		'section--white-text',
		('0' in content.field_join_with_next_block[0] or content.field_join_with_next_block[0] is empty) ? 'mt mb',
		'printable',
	]
%}

{% set custom_title_classes = create_attribute() %}

{%
	set title_classes = [
    'padding',
    'section-title',
    ('1' in content.field_kapitalky[0] or content.field_kapitalky[0] is empty) ? 'text-uppercase',
    ('1' in content.field_zmensit[0] or content.field_zmensit[0] is empty) ? 'font-calibri-smaller',
		('1' in content.field_oddelit_tenkou_linkou[0] or content.field_oddelit_tenkou_linkou[0] is empty) ? 'border-bottom',
	]
%}

{% block paragraph %}
  <section {{ attributes.addClass(section_classes) }}>
  
    {% block content %}

    {% if (not content.field_skryt_nadpis['#items'].0.getValue().value) and (content.field_anchor is not empty) %}
      {% set view = drupal_view_result('test_smooth_menu', 'block_1', page_id)|length %}
        {% if view > 0 %}
          {{ drupal_view('test_smooth_menu', 'block_1', page_id) }}
        {% endif %}
    {% endif %}

    {% if (content.field_skryt_nadpis['#items'].0.getValue().value) %}
    {% else %}
        {# {{ content.field_title }} #}
        <h2 id="{{ content.field_anchor.0 }}" {{ custom_title_classes.addClass(title_classes) }}>{{ content.field_title.0 }}</h2>
        {# <h2 id="{{ content.field_anchor.0 }}" class="padding section-title">{{ content.field_title.0 }}</h2> #}
    {% endif %}


    {{ content.field_wysiwyg_body }}
    
    {% endblock %}
  </section>
{% endblock paragraph %}
